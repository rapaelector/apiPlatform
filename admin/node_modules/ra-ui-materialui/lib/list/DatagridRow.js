"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
var react_redux_1 = require("react-redux");
var react_router_redux_1 = require("react-router-redux");
var TableCell_1 = __importDefault(require("@material-ui/core/TableCell"));
var TableRow_1 = __importDefault(require("@material-ui/core/TableRow"));
var Checkbox_1 = __importDefault(require("@material-ui/core/Checkbox"));
var classnames_1 = __importDefault(require("classnames"));
var ra_core_1 = require("ra-core");
var DatagridCell_1 = __importDefault(require("./DatagridCell"));
var sanitizeRestProps = function (_a) {
    var basePath = _a.basePath, children = _a.children, classes = _a.classes, className = _a.className, rowClick = _a.rowClick, id = _a.id, isLoading = _a.isLoading, onToggleItem = _a.onToggleItem, push = _a.push, record = _a.record, resource = _a.resource, selected = _a.selected, style = _a.style, styles = _a.styles, rest = __rest(_a, ["basePath", "children", "classes", "className", "rowClick", "id", "isLoading", "onToggleItem", "push", "record", "resource", "selected", "style", "styles"]);
    return rest;
};
var DatagridRow = /** @class */ (function (_super) {
    __extends(DatagridRow, _super);
    function DatagridRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleToggle = function (event) {
            _this.props.onToggleItem(_this.props.id);
            event.stopPropagation();
        };
        _this.handleClick = function () {
            var _a = _this.props, basePath = _a.basePath, rowClick = _a.rowClick, id = _a.id, push = _a.push;
            if (!rowClick)
                return;
            if (rowClick === 'edit') {
                push(ra_core_1.linkToRecord(basePath, id));
            }
            if (rowClick === 'show') {
                push(ra_core_1.linkToRecord(basePath, id, 'show'));
            }
            if (typeof rowClick === 'function') {
                push(rowClick(id, basePath));
            }
        };
        return _this;
    }
    DatagridRow.prototype.render = function () {
        var _a = this.props, basePath = _a.basePath, children = _a.children, classes = _a.classes, className = _a.className, hasBulkActions = _a.hasBulkActions, hover = _a.hover, id = _a.id, record = _a.record, resource = _a.resource, selected = _a.selected, style = _a.style, styles = _a.styles, rest = __rest(_a, ["basePath", "children", "classes", "className", "hasBulkActions", "hover", "id", "record", "resource", "selected", "style", "styles"]);
        return (react_1.default.createElement(TableRow_1.default, __assign({ className: className, key: id, style: style, hover: hover, onClick: this.handleClick }, sanitizeRestProps(rest)),
            hasBulkActions && (react_1.default.createElement(TableCell_1.default, { padding: "none" },
                react_1.default.createElement(Checkbox_1.default, { color: "primary", className: "select-item " + classes.checkbox, checked: selected, onClick: this.handleToggle }))),
            react_1.default.Children.map(children, function (field, index) {
                return field ? (react_1.default.createElement(DatagridCell_1.default, __assign({ key: id + "-" + (field.props.source || index), className: classnames_1.default("column-" + field.props.source, classes.rowCell), record: record, id: id }, { field: field, basePath: basePath, resource: resource }))) : null;
            })));
    };
    return DatagridRow;
}(react_1.Component));
DatagridRow.propTypes = {
    basePath: prop_types_1.default.string,
    children: prop_types_1.default.node,
    classes: prop_types_1.default.object,
    className: prop_types_1.default.string,
    hasBulkActions: prop_types_1.default.bool.isRequired,
    hover: prop_types_1.default.bool,
    id: prop_types_1.default.any,
    onToggleItem: prop_types_1.default.func,
    push: prop_types_1.default.func,
    record: prop_types_1.default.object.isRequired,
    resource: prop_types_1.default.string,
    rowClick: prop_types_1.default.oneOfType([prop_types_1.default.string, prop_types_1.default.func]),
    selected: prop_types_1.default.bool,
    style: prop_types_1.default.object,
    styles: prop_types_1.default.object,
};
DatagridRow.defaultProps = {
    hasBulkActions: false,
    hover: true,
    record: {},
    selected: false,
};
// wat? TypeScript looses the displayName if we don't set it explicitly
DatagridRow.displayName = 'DatagridRow';
exports.default = react_redux_1.connect(null, { push: react_router_redux_1.push })(DatagridRow);
