"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dataFetchActions_1 = require("../dataFetchActions");
exports.CRUD_GET_LIST = 'RA/CRUD_GET_LIST';
exports.CRUD_GET_LIST_LOADING = 'RA/CRUD_GET_LIST_LOADING';
exports.CRUD_GET_LIST_FAILURE = 'RA/CRUD_GET_LIST_FAILURE';
exports.CRUD_GET_LIST_SUCCESS = 'RA/CRUD_GET_LIST_SUCCESS';
exports.crudGetList = function (resource, pagination, sort, filter) { return ({
    type: exports.CRUD_GET_LIST,
    payload: { pagination: pagination, sort: sort, filter: filter },
    meta: {
        resource: resource,
        fetch: dataFetchActions_1.GET_LIST,
        onFailure: {
            notification: {
                body: 'ra.notification.http_error',
                level: 'warning',
            },
        },
    },
}); };
exports.CRUD_GET_ALL = 'RA/CRUD_GET_ALL';
exports.CRUD_GET_ALL_LOADING = 'RA/CRUD_GET_ALL_LOADING';
exports.CRUD_GET_ALL_FAILURE = 'RA/CRUD_GET_ALL_FAILURE';
exports.CRUD_GET_ALL_SUCCESS = 'RA/CRUD_GET_ALL_SUCCESS';
exports.crudGetAll = function (resource, sort, filter, maxResults, callback) { return ({
    type: exports.CRUD_GET_ALL,
    payload: { sort: sort, filter: filter, pagination: { page: 1, perPage: maxResults } },
    meta: {
        resource: resource,
        fetch: dataFetchActions_1.GET_LIST,
        onSuccess: {
            callback: callback,
        },
        onFailure: {
            notification: {
                body: 'ra.notification.http_error',
                level: 'warning',
            },
        },
    },
}); };
exports.CRUD_GET_ONE = 'RA/CRUD_GET_ONE';
exports.CRUD_GET_ONE_LOADING = 'RA/CRUD_GET_ONE_LOADING';
exports.CRUD_GET_ONE_FAILURE = 'RA/CRUD_GET_ONE_FAILURE';
exports.CRUD_GET_ONE_SUCCESS = 'RA/CRUD_GET_ONE_SUCCESS';
exports.crudGetOne = function (resource, id, basePath, refresh) {
    if (refresh === void 0) { refresh = true; }
    return ({
        type: exports.CRUD_GET_ONE,
        payload: { id: id },
        meta: {
            resource: resource,
            fetch: dataFetchActions_1.GET_ONE,
            basePath: basePath,
            onFailure: {
                notification: {
                    body: 'ra.notification.item_doesnt_exist',
                    level: 'warning',
                },
                redirectTo: 'list',
                refresh: refresh,
            },
        },
    });
};
exports.CRUD_CREATE = 'RA/CRUD_CREATE';
exports.CRUD_CREATE_LOADING = 'RA/CRUD_CREATE_LOADING';
exports.CRUD_CREATE_FAILURE = 'RA/CRUD_CREATE_FAILURE';
exports.CRUD_CREATE_SUCCESS = 'RA/CRUD_CREATE_SUCCESS';
exports.crudCreate = function (resource, data, basePath, redirectTo) {
    if (redirectTo === void 0) { redirectTo = 'edit'; }
    return ({
        type: exports.CRUD_CREATE,
        payload: { data: data },
        meta: {
            resource: resource,
            fetch: dataFetchActions_1.CREATE,
            onSuccess: {
                notification: {
                    body: 'ra.notification.created',
                    level: 'info',
                    messageArgs: {
                        smart_count: 1,
                    },
                },
                redirectTo: redirectTo,
                basePath: basePath,
            },
            onFailure: {
                notification: {
                    body: 'ra.notification.http_error',
                    level: 'warning',
                },
            },
        },
    });
};
exports.CRUD_UPDATE = 'RA/CRUD_UPDATE';
exports.CRUD_UPDATE_LOADING = 'RA/CRUD_UPDATE_LOADING';
exports.CRUD_UPDATE_FAILURE = 'RA/CRUD_UPDATE_FAILURE';
exports.CRUD_UPDATE_SUCCESS = 'RA/CRUD_UPDATE_SUCCESS';
exports.CRUD_UPDATE_OPTIMISTIC = 'RA/CRUD_UPDATE_OPTIMISTIC';
exports.crudUpdate = function (resource, id, data, previousData, basePath, redirectTo) {
    if (redirectTo === void 0) { redirectTo = 'show'; }
    return ({
        type: exports.CRUD_UPDATE,
        payload: { id: id, data: data, previousData: previousData },
        meta: {
            resource: resource,
            fetch: dataFetchActions_1.UPDATE,
            onSuccess: {
                notification: {
                    body: 'ra.notification.updated',
                    level: 'info',
                    messageArgs: {
                        smart_count: 1,
                    },
                },
                redirectTo: redirectTo,
                basePath: basePath,
            },
            onFailure: {
                notification: {
                    body: 'ra.notification.http_error',
                    level: 'warning',
                },
            },
        },
    });
};
exports.CRUD_UPDATE_MANY = 'RA/CRUD_UPDATE_MANY';
exports.CRUD_UPDATE_MANY_LOADING = 'RA/CRUD_UPDATE_MANY_LOADING';
exports.CRUD_UPDATE_MANY_FAILURE = 'RA/CRUD_UPDATE_MANY_FAILURE';
exports.CRUD_UPDATE_MANY_SUCCESS = 'RA/CRUD_UPDATE_MANY_SUCCESS';
exports.CRUD_UPDATE_MANY_OPTIMISTIC = 'RA/CRUD_UPDATE_MANY_OPTIMISTIC';
exports.crudUpdateMany = function (resource, ids, data, basePath, refresh) {
    if (refresh === void 0) { refresh = true; }
    return ({
        type: exports.CRUD_UPDATE_MANY,
        payload: { ids: ids, data: data },
        meta: {
            resource: resource,
            fetch: dataFetchActions_1.UPDATE_MANY,
            cancelPrevious: false,
            onSuccess: {
                notification: {
                    body: 'ra.notification.updated',
                    level: 'info',
                    messageArgs: {
                        smart_count: ids.length,
                    },
                },
                basePath: basePath,
                refresh: refresh,
                unselectAll: true,
            },
            onFailure: {
                notification: {
                    body: 'ra.notification.http_error',
                    level: 'warning',
                },
            },
        },
    });
};
exports.CRUD_DELETE = 'RA/CRUD_DELETE';
exports.CRUD_DELETE_LOADING = 'RA/CRUD_DELETE_LOADING';
exports.CRUD_DELETE_FAILURE = 'RA/CRUD_DELETE_FAILURE';
exports.CRUD_DELETE_SUCCESS = 'RA/CRUD_DELETE_SUCCESS';
exports.CRUD_DELETE_OPTIMISTIC = 'RA/CRUD_DELETE_OPTIMISTIC';
exports.crudDelete = function (resource, id, previousData, basePath, redirectTo) {
    if (redirectTo === void 0) { redirectTo = 'list'; }
    return ({
        type: exports.CRUD_DELETE,
        payload: { id: id, previousData: previousData },
        meta: {
            resource: resource,
            fetch: dataFetchActions_1.DELETE,
            onSuccess: {
                notification: {
                    body: 'ra.notification.deleted',
                    level: 'info',
                    messageArgs: {
                        smart_count: 1,
                    },
                },
                redirectTo: redirectTo,
                basePath: basePath,
            },
            onFailure: {
                notification: {
                    body: 'ra.notification.http_error',
                    level: 'warning',
                },
            },
        },
    });
};
exports.CRUD_DELETE_MANY = 'RA/CRUD_DELETE_MANY';
exports.CRUD_DELETE_MANY_LOADING = 'RA/CRUD_DELETE_MANY_LOADING';
exports.CRUD_DELETE_MANY_FAILURE = 'RA/CRUD_DELETE_MANY_FAILURE';
exports.CRUD_DELETE_MANY_SUCCESS = 'RA/CRUD_DELETE_MANY_SUCCESS';
exports.CRUD_DELETE_MANY_OPTIMISTIC = 'RA/CRUD_DELETE_MANY_OPTIMISTIC';
exports.crudDeleteMany = function (resource, ids, basePath, refresh) {
    if (refresh === void 0) { refresh = true; }
    return ({
        type: exports.CRUD_DELETE_MANY,
        payload: { ids: ids },
        meta: {
            resource: resource,
            fetch: dataFetchActions_1.DELETE_MANY,
            onSuccess: {
                notification: {
                    body: 'ra.notification.deleted',
                    level: 'info',
                    messageArgs: {
                        smart_count: ids.length,
                    },
                },
                basePath: basePath,
                refresh: refresh,
                unselectAll: true,
            },
            onFailure: {
                notification: {
                    body: 'ra.notification.http_error',
                    level: 'warning',
                },
            },
        },
    });
};
exports.CRUD_GET_MANY = 'RA/CRUD_GET_MANY';
exports.CRUD_GET_MANY_LOADING = 'RA/CRUD_GET_MANY_LOADING';
exports.CRUD_GET_MANY_FAILURE = 'RA/CRUD_GET_MANY_FAILURE';
exports.CRUD_GET_MANY_SUCCESS = 'RA/CRUD_GET_MANY_SUCCESS';
// Reference related actions
exports.crudGetMany = function (resource, ids) { return ({
    type: exports.CRUD_GET_MANY,
    payload: { ids: ids },
    meta: {
        resource: resource,
        fetch: dataFetchActions_1.GET_MANY,
        onFailure: {
            notification: {
                body: 'ra.notification.http_error',
                level: 'warning',
            },
        },
    },
}); };
exports.CRUD_GET_MATCHING = 'RA/CRUD_GET_MATCHING';
exports.CRUD_GET_MATCHING_LOADING = 'RA/CRUD_GET_MATCHING_LOADING';
exports.CRUD_GET_MATCHING_FAILURE = 'RA/CRUD_GET_MATCHING_FAILURE';
exports.CRUD_GET_MATCHING_SUCCESS = 'RA/CRUD_GET_MATCHING_SUCCESS';
exports.crudGetMatching = function (reference, relatedTo, pagination, sort, filter) { return ({
    type: exports.CRUD_GET_MATCHING,
    payload: { pagination: pagination, sort: sort, filter: filter },
    meta: {
        resource: reference,
        relatedTo: relatedTo,
        fetch: dataFetchActions_1.GET_LIST,
        onFailure: {
            notification: {
                body: 'ra.notification.http_error',
                level: 'warning',
            },
        },
    },
}); };
exports.CRUD_GET_MANY_REFERENCE = 'RA/CRUD_GET_MANY_REFERENCE';
exports.CRUD_GET_MANY_REFERENCE_LOADING = 'RA/CRUD_GET_MANY_REFERENCE_LOADING';
exports.CRUD_GET_MANY_REFERENCE_FAILURE = 'RA/CRUD_GET_MANY_REFERENCE_FAILURE';
exports.CRUD_GET_MANY_REFERENCE_SUCCESS = 'RA/CRUD_GET_MANY_REFERENCE_SUCCESS';
exports.crudGetManyReference = function (reference, target, id, relatedTo, pagination, sort, filter, source) { return ({
    type: exports.CRUD_GET_MANY_REFERENCE,
    payload: { target: target, id: id, pagination: pagination, sort: sort, filter: filter, source: source },
    meta: {
        resource: reference,
        relatedTo: relatedTo,
        fetch: dataFetchActions_1.GET_MANY_REFERENCE,
        onFailure: {
            notification: {
                body: 'ra.notification.http_error',
                level: 'warning',
            },
        },
    },
}); };
